<?php

/**
 * @file
 * Defines simple skype_status_cck field types.
 */

/**
 * Implementation of hook_theme().
 */
function skype_status_cck_theme() {
  return array(
    'skype_status_field' => array(
      'arguments' => array('element' => NULL),
    ),
    'skype_status_cck_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'skype_status_cck_formatter_balloon' => array(
      'arguments' => array('element' => NULL),
    ),
    'skype_status_cck_formatter_bigclassic' => array(
      'arguments' => array('element' => NULL),
    ),
    'skype_status_cck_formatter_smallclassic' => array(
      'arguments' => array('element' => NULL),
    ),
    'skype_status_cck_formatter_mediumicon' => array(
      'arguments' => array('element' => NULL),
    ),
    'skype_status_cck_formatter_smallicon' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function skype_status_cck_field_info() {
  return array(
    'skype_status_cck' => array(
      'label' => t('Skype'),
      'description' => t('Store skype in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function skype_status_cck_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['value'] = array('type' => 'varchar', 'length' => '255', 'not null' => FALSE, 'sortable' => TRUE, 'views' => TRUE);
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function skype_status_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $skype_status_cck = isset($item['value']) ? check_plain($item['value']) : '';
        $items[$delta]['safe'] = $skype_status_cck;
      }
    break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function skype_status_cck_content_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function skype_status_cck_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'balloon' => array(
      'label' => t('Baloon'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'bigclassic' => array(
      'label' => t('Big classic'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'smallclassic' => array(
      'label' => t('Small classic'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'mediumicon' => array(
      'label' => t('Medium icon'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'smallicon' => array(
      'label' => t('Small icon'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' skype_status_cck field formatter.
 */
function theme_skype_status_cck_formatter_default($element) {
  $buttonstyle = variable_get('skype_status_buttonstyle', 'bigclassic');
  return _theme_skype_status_cck_format($element, $buttonstyle);
}

function theme_skype_status_cck_formatter_balloon($element) {
  return _theme_skype_status_cck_format($element, 'balloon');
}

function theme_skype_status_cck_formatter_bigclassic($element) {
  return _theme_skype_status_cck_format($element, 'bigclassic');
}

function theme_skype_status_cck_formatter_smallclassic($element) {
  return _theme_skype_status_cck_format($element, 'smallclassic');
}

function theme_skype_status_cck_formatter_mediumicon($element) {
  return _theme_skype_status_cck_format($element, 'mediumicon');
}

function theme_skype_status_cck_formatter_smallicon($element) {
  return _theme_skype_status_cck_format($element, 'smallicon');
}

function _theme_skype_status_cck_format($element, $buttonstyle) {
  $status = skype_status_getstatus(rawurlencode($element['#item']['safe']));
  return theme('skype_status', $element['#item']['safe'], $buttonstyle, $status);
}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function skype_status_cck_widget_info() {
  return array(
    'skype_status_field' => array(
      'label' => t('Skype'),
      'field types' => array('skype_status_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by skype_status_cck_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function skype_status_cck_elements() {
  return array(
    'skype_status_field' => array(
      '#input' => TRUE,
      '#columns' => array('value'),
      '#delta' => 0,
      '#process' => array('skype_status_field_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function skype_status_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function skype_status_field_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'skype_status_cck'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  if (!empty($field['skype_status_cck_processing'])) {
    $filter_key = $element['#columns'][1];
    $format = isset($element['#value'][$filter_key]) ? $element['#value'][$filter_key] : FILTER_FORMAT_DEFAULT;
    $parents = array_merge($element['#parents'] , array($filter_key));
    $element[$filter_key] = filter_form($format, 1, $parents);
  }

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  return $element;
}

/**
 * FAPI theme for an individual skype_status_cck elements.
 *
 * The skype_status_cckfield or skype_status_cckarea is already rendered by the
 * skype_status_cckfield or skype_status_cckarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_skype_status_field($element) {
  return $element['#children'];
}