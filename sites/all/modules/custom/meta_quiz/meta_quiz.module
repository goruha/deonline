<?php

function meta_quiz_menu_alter(&$menu) {
  $menu['node/%node/take']['page callback'] = 'meta_quiz_take';
  $menu['node/%node/take']['access callback'] = 'meta_quiz_take_access';
}

function meta_quiz_take($node) {
  global $user;
  if ($node->type == 'quiz') {
    return quiz_take($node);
  }
  $value = variable_get("meta_quiz_field_{$node->type}", '');
  foreach($node->{$value} as $delta => $value) {
    $quiz = node_load($value['nid']);
    if (!quiz_is_passed($user->uid, $quiz->nid, $quiz->vid)) {
      return meta_quiz_subquiz_take($node, $quiz);
    }
  }
  return '';
}

/**
 * Does the current user have access to take the quiz?
 *
 * @param $node
 *  The quiz node
 */
function meta_quiz_take_access($node) {
  if ($node->type == 'quiz') {
    return quiz_take_access($node);
  }
  $value = variable_get("meta_quiz_field_{$node->type}", '');
  return !empty($value);
}


function meta_quiz_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_type_form') {
    $fields = array('' => t('None'));
    $type = content_types($form['#node_type']->type);
    $candidate_fields = $type['fields'];
    foreach($candidate_fields as $field_mname => $field) {
      if ($field['module'] == 'nodereference') {
        $fields[$field_mname] = $field['widget']['label'];
      }
    }
    $var_name = "meta_quiz_field";
    $form['workflow'][$var_name] = array(
      '#type' => 'select',
      '#title' => t('Quiz field for meta quiz'),
      '#description' => t('If selected @type will be used as meta quiz content type. IMPORTANT!: field should reference only to quiz nodes', array('@type' => $form['#node_type']->name)),
      '#options' => $fields,
      '#default_value' => variable_get("{$var_name}_{$form['#node_type']->type}", ''),
    );
  }
}

function meta_quiz_subquiz_take($meta_quiz, $node) {
  drupal_alter('quiz_take', $node);
  if (isset($node->rendered_content))
    return $node->rendered_content;
  $to_be_rendered = meta_quiz_subquiz_take_quiz($meta_quiz, $node);
  return drupal_render($to_be_rendered);
}

function meta_quiz_subquiz_take_quiz($meta_quiz, $quiz) {
  global $user;
  $allow_skipping = $quiz->allow_skipping;

  if (!isset($quiz)) {
    drupal_not_found();
    return;
  }

  // If anonymous user and no unique hash, refresh with a unique string to
  // prevent caching.
  // @todo: Check meta quiz for that case
  if (!$quiz->name && arg(4) == NULL) {
    drupal_goto('node/'. $meta_quiz->nid .'/take/'. md5(mt_rand() . time()));
  }

  // Make sure we use the same revision of the quiz throughout the quiz taking
  // session.
  if (isset($_SESSION['quiz_'. $quiz->nid]['quiz_vid']) && $quiz->vid != $_SESSION['quiz_'. $quiz->nid]['quiz_vid']) {
    $quiz = node_load($quiz->nid, $_SESSION['quiz_'. $quiz->nid]['quiz_vid']);
  }

  // If the session has no data for this quiz.
  if (!isset($_SESSION['quiz_'. $quiz->nid]['quiz_questions'])) {
    // We delete questions in progress from old revisions.
    _quiz_delete_old_in_progress($quiz, $user->uid);

    // See if the current user has progress for this revision of the quiz stored
    // in the database
    $rid = $user->uid > 0 ? _quiz_active_result_id($user->uid, $quiz->nid, $quiz->vid) : 0;

    // Are we resuming an in-progress quiz?
    if ($quiz->allow_resume && $rid > 0) {
      _quiz_resume_existing_quiz($quiz, $user->uid, $rid);
    }

    // First time running through quiz.
    elseif (quiz_start_check($quiz, $rid)) {
      // Create question list.
      $questions = quiz_build_question_list($quiz);
      if ($questions === FALSE) {
        drupal_set_message(t('Not enough random questions were found. Please add more questions before trying to take this @quiz.',
          array('@quiz' => QUIZ_NAME)), 'error');
        return array('body' => array('#value' => ' '));
      }

      if (count($questions) == 0) {
        drupal_set_message(t('No questions were found. Please !assign_questions before trying to take this @quiz.',
          array('@quiz' => QUIZ_NAME, '!assign_questions' => l(t('assign questions'), 'node/'. arg(1) .'/questions'))), 'error');
        return array('body' => array('#value' => t('Please assign questions...')));
      }

      // Initialize session variables.
      $_SESSION['quiz_'. $quiz->nid]['result_id'] = quiz_create_rid($quiz);
      $_SESSION['quiz_'. $quiz->nid]['quiz_questions'] = $questions;
      $_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions'] = array();
      $_SESSION['quiz_'. $quiz->nid]['question_number'] = 0;
      $_SESSION['quiz_'. $quiz->nid]['question_start_time'] = time();
      $_SESSION['quiz_'. $quiz->nid]['question_duration'] = $quiz->time_limit;
      $_SESSION['quiz_'. $quiz->nid]['quiz_vid'] = $quiz->vid;
    }

    else {
      return array('body' => array('#value' => t('This quiz is closed')));
    }
  }

  $q_passed_validation = FALSE;

  if (quiz_availability($quiz) !== TRUE) {
    drupal_set_message(t('This quiz is not available anymore.'), 'error');
    return array('body' => array('#value' => t('This quiz is closed')));
  }
  if (!isset($_POST['op'])) {
    // @todo Starting new quiz... Do we need to show instructions here?
  }
  elseif ($_POST['question_nid'] != $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0]['nid']) {
    // The user has pressed the navigation buttons multiple times...
  }
  // We maintain two lists: previous questions and upcomming questions.
  // When we go backward, we pop one from the previous and prepend it to the
  // upcomming.
  // @todo This can be maintained more efficiently with a single array of all
  //   questions and then a pointer to the current question. That makes
  //   rewinding much easier.
  // Check for answer submission.
  elseif ($_POST['op'] == t('Finish') || $_POST['op'] == t('Next') || $_POST['op'] == t('Back') && $quiz->backwards_navigation) {
    // Previous quiz questions: Questions that have been asked already. We save
    // a record of all of them so that a user can navigate backward all the way
    // to the beginning of the quiz.
    $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0]['rid'] = $_SESSION['quiz_' . $quiz->nid]['result_id'];
    $_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions'][] = $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0];
    $former_question_array = array_shift($_SESSION['quiz_'. $quiz->nid]['quiz_questions']);
    $former_question = node_load($former_question_array['nid'], $former_question_array['vid']);

    // Call hook_evaluate_question().
    $types = _quiz_get_question_types();
    $module = $types[$former_question->type]['module'];
    $result = module_invoke($module, 'evaluate_question', $former_question, $_SESSION['quiz_'. $quiz->nid]['result_id']);
    $q_passed_validation = $result->is_valid;
    $check_jump = TRUE;
    if ($q_passed_validation === TRUE) {
      quiz_store_question_result($quiz, $result, array('set_msg' => TRUE, 'question_data' => $former_question_array));
    }
    elseif ($quiz->allow_jumping && _quiz_is_int($_POST['jump_to_question'])) {
      $_POST['op'] = t('Skip');
      $allow_skipping = TRUE;
      $jumping = TRUE;
    }

    // Stash feedback in the session, since the $_POST gets cleared.
    if ($quiz->feedback_time == QUIZ_FEEDBACK_QUESTION && $_POST['op'] != t('Back') && $q_passed_validation === TRUE) {
      // Invoke hook_get_report().
      $report = module_invoke($module, 'get_report', $former_question_array['nid'], $former_question_array['vid'], $_SESSION['quiz_'. $quiz->nid]['result_id']);
      $path = drupal_get_path('module', 'quiz');
      require_once($path .'/quiz.pages.inc');
      if ($report)
        $_SESSION['quiz_'. $quiz->nid]['feedback'] = rawurlencode(drupal_get_form('quiz_report_form', array($report)));
    }
    if ($quiz->repeat_until_correct && $_POST['op'] != t('Back') && $q_passed_validation === TRUE) {
      // If the question was answered incorrectly, repeat it
      if ($result && !$result->is_correct && $result->is_evaluated) {
        $last_q = array_pop($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions']);
        array_unshift($_SESSION['quiz_' . $quiz->nid]['quiz_questions'], $last_q);
        drupal_set_message(t('The answer was incorrect. Please try again.'), 'error');
        unset($_SESSION['quiz_'. $quiz->nid]['feedback']);
      }
    }
    elseif ($_POST['op'] == t('Back') && $quiz->backwards_navigation) {
      $quiz_id = 'quiz_' . $quiz->nid;
      // We jump back two times. From the next question to the current, and then
      // from the current to the previous.
      for ($i = 0; $i < 2 ; $i++) {
        $last_q = array_pop($_SESSION[$quiz_id]['previous_quiz_questions']);
        array_unshift($_SESSION[$quiz_id]['quiz_questions'], $last_q);
      }
    }
    // If anonymous user, refresh url with unique hash to prevent caching.
    if (!$user->uid  && $q_passed_validation === TRUE) {
      drupal_goto('node/'. $meta_quiz->nid .'/take', array('quizkey' => md5(mt_rand() . time())));
    }
  }
  // Check for a skip.
  if (($_POST['op'] == t('Skip') || $_POST['op'] == t('Skip and finish')) && $allow_skipping) {
    if (!isset($_SESSION['quiz_'. $quiz->nid]['result_id'])) {
      $_SESSION['quiz_'. $quiz->nid]['result_id'] = quiz_create_rid($quiz);
    }
    $q_passed_validation = TRUE;
    // Advance the question.
    if (!$jumping) {
      $_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions'][] = $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0];

      // Load the last asked question.
      $former_question_array = array_shift($_SESSION['quiz_'. $quiz->nid]['quiz_questions']);
      $former_question = node_load($former_question_array['nid'], $former_question_array['vid']);
    }
    // Call hook_skip_question().
    $module = quiz_question_module_for_type($former_question->type);
    if (!$module) return array('body' => array('#value' => ' '));
    $result = module_invoke($module, 'skip_question', $former_question, $_SESSION['quiz_'. $quiz->nid]['result_id']);


    // Store that the question was skipped:
    quiz_store_question_result($quiz, $result, array('set_msg' => TRUE, 'question_data' => $former_question_array));
  }

  if ($check_jump) {
    if ($quiz->allow_jumping && _quiz_is_int($_POST['jump_to_question'])) {
      quiz_jump_to($_POST['jump_to_question'], $quiz, $_SESSION['quiz_'. $quiz->nid]['result_id']);
    }
  }
  $show_validation_message = FALSE;
  // If this quiz is in progress, load the next questions and return it via the theme.
  if (!empty($_SESSION['quiz_'. $quiz->nid]['quiz_questions']) || is_string($q_passed_validation)) {
    // If we got no error when validating the question
    if (!is_string($q_passed_validation) || $_POST['op'] == t('Back') && $quiz->backwards_navigation) {
      $question_node = node_load(
        $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0]['nid'],
        $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0]['vid']
      );
      if (isset($_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0]['rid']))
        $question_node->rid = $_SESSION['quiz_'. $quiz->nid]['quiz_questions'][0]['rid'];
    // We got an error message when trying to validate the previous answer
    }
    else {
      $question_node = $former_question;
      $show_validation_message = TRUE;
      array_unshift($_SESSION['quiz_'. $quiz->nid]['quiz_questions'], $former_question_array);
      if (is_array($_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions'])) {
        array_shift($_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions']);
      }
      // Avoid caching for anonymous users
      if (!$user->uid) {
        drupal_goto('node/'. $meta_quiz->nid .'/take', array('quizkey' => md5(mt_rand() . time())));
      }
    }

    // Added the progress info to the view.
    $number_of_questions = quiz_get_number_of_questions($quiz->vid);
    $question_number = $number_of_questions - count($_SESSION['quiz_'. $quiz->nid]['quiz_questions']);
    $question_node->question_number = $question_number;
    $content['dsadsda']['#value'] = '';
    $content['dsadsda']['#weight'] = -51;
    $content['progress']['#value'] = theme('quiz_progress', $question_number, $number_of_questions, $quiz->allow_jumping, $quiz->time_limit);
    $content['progress']['#weight'] = -50;
    if (count($_SESSION['quiz_'. $quiz->nid]['quiz_questions']) + count($_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions']) > $number_of_questions) {
      drupal_set_message(t('At least one question have been deleted from the quiz after you started taking it. You will have to start over.'), 'warning', FALSE);
      unset($_SESSION['quiz_'. $quiz->nid]);
      drupal_goto('node/'. $meta_quiz->nid .'/take');
    }
    if ($_SESSION['quiz_'. $quiz->nid]['question_duration']) {
      $_SESSION['quiz_'. $quiz->nid]['question_duration'] -= time() - $_SESSION['quiz_'. $quiz->nid]['question_start_time'];
      $time = ($_SESSION['quiz_'. $quiz->nid]['question_duration'] > 0) ? $_SESSION['quiz_'. $quiz->nid]['question_duration'] : 1;
      db_query("UPDATE {quiz_node_results} SET time_left = %d WHERE result_id = %d", $time, $_SESSION['quiz_'. $quiz->nid]['result_id']);

      if ($time == 1) {
        // Quiz has been timed out, run a loop to mark the remaining questions
        // as skipped.
        quiz_jump_to(count($_SESSION['quiz_'. $quiz->nid]['quiz_questions']) + count($_SESSION['quiz_'. $quiz->nid]['previous_quiz_questions']) + 1, $quiz, $_SESSION['quiz_'. $quiz->nid]['result_id']);
        $quiz_end = TRUE;
        unset($content['progress']);
        $show_validation_message = FALSE;
        drupal_set_message(t('You have run out of time.'), 'error');
      }
      else {
        // There is still time left, so let's go ahead and insert the countdown
        // javascript.
        if (function_exists('jquery_countdown_add') && variable_get('quiz_has_timer', 1)) {
          jquery_countdown_add('.countdown', array('until' => $time, 'onExpiry' => 'finished', 'compact' => TRUE, 'layout' => t('Time left') . ': {hnn}{sep}{mnn}{sep}{snn}'));
          // These are the two button op values that are accepted for answering
          // questions.
          $button_op1 = drupal_to_js(t('Finish'));
          $button_op2 = drupal_to_js(t('Next'));
          $js = "
            function finished() {
              // Find all buttons with a name of 'op'.
              var buttons = $('input[type=submit][name=op], button[type=submit][name=op]');
              // Filter out the ones that don't have the right op value.
              buttons = buttons.filter(function() {
                return this.value == $button_op1 || this.value == $button_op2;
              });
              if (buttons.length == 1) {
                // Since only one button was found, this must be it.
                buttons.click();
              }
              else {
                // Zero, or more than one buttons were found; fall back on a page refresh.
                window.location = window.location.href;
              }
            }
          ";
          drupal_add_js($js, 'inline');
        }
      }
      $_SESSION['quiz_'. $quiz->nid]['question_start_time'] = time();
    }
    if ($show_validation_message) {
      drupal_set_message($q_passed_validation, 'error');
    }
    // If we're not yet at the end.
    if (empty($quiz_end)) {
      $content['body']['question']['#value'] = quiz_take_question_view($question_node, $quiz);
      $content['body']['question']['#weight'] = 0;
      // If we had feedback from the last question.
      if (isset($_SESSION['quiz_'. $quiz->nid]['feedback']) && $quiz->feedback_time == QUIZ_FEEDBACK_QUESTION) {
        $content['body']['feedback']['#value'] = rawurldecode($_SESSION['quiz_'. $quiz->nid]['feedback']);
        $content['body']['feedback']['#weight'] = -100;
      }
      drupal_set_title(check_plain($meta_quiz->title));
      unset($_SESSION['quiz_'. $quiz->nid]['feedback']);
    }
  }
  // Else we're at the end of quiz.
  else {
    $quiz_end = TRUE;
  }
  // If we're at the end of the quiz.
  if (!empty($quiz_end)) {
    // IMPORTANT: Because of a bug _quiz_get_answers always have to be called before quiz_end_scoring... :/
    $questions = _quiz_get_answers($quiz, $_SESSION['quiz_'. $quiz->nid]['result_id']);
    $score = quiz_end_scoring($quiz, $_SESSION['quiz_'. $quiz->nid]['result_id']);
    // Get the results and summary text for this quiz.
    $summary = _quiz_get_summary_text($quiz, $score);
    // Get the themed summary page.
    $content['body']['#value'] = theme('meta_quiz_take_summary', $meta_quiz, $quiz, $questions, $score, $summary);

    if ($score['is_evaluated']) {
      _quiz_maintain_results($quiz, $_SESSION['quiz_'. $quiz->nid]['result_id']);
    }

    // Remove session variables, save $rid
    $rid = $_SESSION['quiz_'. $quiz->nid]['result_id'];
    unset($_SESSION['quiz_'. $quiz->nid]);
    // NOTE: End actions might redirect the user somewhere. Code below this line might not get executed...
    quiz_end_actions($quiz, $rid, $score);
  }
  return $content;
}

/**
 * Implementation of hook_theme().
 */
function meta_quiz_theme() {
  return array(
    'meta_quiz_take_summary' => array(
      'arguments' => array('meta_quiz' => NULL, 'quiz' => NULL, 'questions' => NULL, 'score' => 0, 'summary' => ''),
      'file' => 'meta_quiz.theme.inc',
      'template' => 'templates/meta-quiz-take-summary',
    ),
  );
}
