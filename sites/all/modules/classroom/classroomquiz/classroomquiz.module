<?php
// $Id: classroomquiz.module,v 1.12 2010/03/18 21:09:53 osoh Exp $

/**
 * Implementation of hook_init().
 */
function classroomquiz_init() {
  module_load_include('inc', 'classroomquiz', 'classroomquiz.access');
  module_load_include('inc', 'classroomquiz', 'classroomquiz.pages');
}

/**
 * Implementation of hook_menu().
 */
function classroomquiz_menu() {
  $items = array();
  $items['classroomquiz/%'] = array(
    'title callback' => '_classroomquiz_page_title',
    'title arguments' => array(1),
    'page callback' => '_classroomquiz_page',
    'page arguments' => array(1),
    'access callback' => 'classroomquiz_user_is_signed_up_or_owner_by_quiz',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'classroomquiz.pages.inc'
  );

  $items['classroomquiz/%/view'] = array(
    'title' => 'View',
    'description' => 'Quiz page',
    'access callback' => 'classroomquiz_user_is_signed_up_or_owner_by_quiz',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['classroomquiz/%/responses'] = array(
    'title' => 'Responses',
    'description' => 'Responses of an assignment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('classroom_assignment_responses_form', 1),
    'access callback' => 'classroom_check_access',
    'access arguments' => array(1, array(CLASSROOM_MANAGER_STRING, CLASSROOM_TEACHER_STRING), 'assignment'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  $items['classroomquiz/%/questions'] = array(
    'title' => 'Manage questions',
    'description' => 'Edit current quiz questions',
    'page callback' => '_classroomquiz_goto',
    'page arguments' => array(1,'/questions'),
    'access callback' => 'classroomquiz_is_teacher_or_owner_by_quiz',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  $items['classroomquiz/%/admin'] = array(
    'title' => 'Quiz admin',
    'description' => 'Administrate quiz',
    'page callback' => '_classroomquiz_goto',
    'page arguments' => array(1,'/admin'),
    'access callback' => 'classroomquiz_is_teacher_or_owner_by_quiz',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  $items['classroomquiz/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit current quiz',
    'page callback' => '_classroomquiz_goto',
    'page arguments' => array(1,'/edit'),
    'access callback' => 'classroomquiz_is_teacher_or_owner_by_quiz',
    'access arguments' => array(1),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Dummy function to make a redirect
 */
function _classroomquiz_goto($node, $path) {
  drupal_goto('node/'.$node.$path);
}

/**
 * Implementation of hook_form_alter ()
 */
function classroomquiz_form_alter(&$form, $form_state, $form_id) {

  //Delete a quiz response
  if ($form_id == 'quiz_admin_result_delete_form') {
    $response_id = $form['del_rid']['#value'];
    $questions = db_fetch_array(
      db_query("SELECT nid FROM quiz_node_results WHERE result_id = %d",$response_id)
    );

    $question_nid = $questions['nid'];
    $question_node = node_load($question_nid);
    classroom_set_breadcrumb($question_node, TRUE);

    $form['#submit'][1] = $form['#submit'][0];
    $form['#submit'][0] = '_classroomquiz_delete_responses';

    $form['#redirect'] = "node/".$question_nid;
    return;
  }

  //Delete a quiz assignment
  if ($form_id == 'node_delete_confirm') {
    $node = $form['#parameters'][2];
    if ($node->type == 'quiz') {
      $form['#redirect'] = "classroom/course/".
        $node->classroom_assignment['course_nid']."/assignments";
    }
    return;

  }

  $node = $form['#node'];
  $type = substr($form_id, 0, strpos($form_id, '_node_form'));

  //Remove end date because it's provided by quiz node
  if (($node->type == 'quiz') &&
    (isset($form['classroom_assignment']['end_date']['date'])))
    $form['classroom_assignment']['end_date']['date'] = array(
      '#type' => 'value',
      '#value' => array(
        'month' => (int)strftime('%m', time()),
        'day' => (int)strftime('%d', time()),
        'year' => (int)strftime('%Y', time())),
      '#tree' => true,
    ); 

}


/**
 * Implementation of hook_nodeapi().
 */
function classroomquiz_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
  case 'presave':
    if (($node->type == 'quiz') &&
      (isset($node->classroom_assignment)))
      _classroomquiz_sync_dates($node);
    break;
  case 'validate':
    if (($node->type == 'quiz') &&
      (isset($node->classroom_assignment)))
      return _classroomquiz_nodeapi_validate($node, $op, $a3, $a4);
    break;
  case 'view':

    if (isset($node->classroom_response) &&
      _classroom_is_type($node->type, 'response'))
      return _classroomquiz_nodeapi_response_view($node, $op, $a3, $a4);

    if (($node->type == 'quiz') &&
      (isset($node->classroom_assignment)))
      return _classroomquiz_nodeapi_assignment_view($node, $op, $a3, $a4);
    break;
  case 'delete':
    break;
  }
}

/**
 * Hook view from nodeapi for assignments
 */
function _classroomquiz_nodeapi_assignment_view(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  if (!$a3) {
    classroomquiz_set_breadcrumb($node);
  }
  
  unset($node->content['classroom_responses']);
  unset($node->content['classroom_assignment']);
}

/**
 * Method to obtain all rows for response details
 */

function _classroomquiz_get_response_table($node) {
  global $user;
  module_load_include('inc','classroom','classroom.assignments');

  $headers = array (
    'student' => array('data' => t('Student'),     'field' => 'name' ),
    'title'   => array('data' => t('Title'),       'field' => 'title'),
    'date'    => array('data' => t('Submit date'), 'field' => 'changed'),
    'grade'   => array('data' => t('Grade'),       'field' => 'grade'),
  );
  $order_sql = tablesort_sql($headers);

  $rows = classroom_assignment_get_own_response($node, $order_sql);
  if ($rows[0]['date'] == '---')
    $rows[0]['title']= '---';
  $table = theme('table', $headers, $rows);
  $table .= theme('pager');
  return $table;
}

/**
 * Hook view from nodeapi for responses
 */
function _classroomquiz_nodeapi_response_view(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  $assignment_node = node_load($node->classroom_response['assignment_nid']);

  if ($assignment_node->type != 'quiz') return;

  if (!$a3) {
    classroomquiz_set_breadcrumb($node);
  }
 
  if (classroom_is_teacher($user, classroom_response_course_node($node))){
    module_load_include('inc', 'quiz', 'quiz.admin');

    $node->content['quiz_results'] = array(
      '#type' => 'markup',
      '#value' => theme_quiz_admin(
        _quiz_get_results($assignment_node->nid, $node->uid)));
  }
  else {
    module_load_include('inc', 'quiz', 'quiz.pages');

    $node->content['quiz_results'] = array(
      '#type' => 'markup',
      '#value' => theme_quiz_get_user_results(
        _quiz_get_results($assignment_node->nid, $node->uid)));
  }

}

/**
 * Hook validate from nodeapi
 */
function _classroomquiz_nodeapi_validate(&$node, $op, $a3 = NULL, $a4 = NULL) {
  _classroomquiz_sync_dates($node);

  $course = node_load($node->classroom_assignment['course_nid']);
return;
  //Check that end date not overdue course end date
  if ( $node->classroom_assignment['end_t'] > (int) $course->classroom_course['end_t'] ) {
    form_set_error('', t('The assignment could not end after the course end'));
  }

  //Check that end date is not before today
  if ( $node->classroom_assignment['end_t'] < time() ) {
    form_set_error('', t('The end date could not be before today'));
  }

}

/**
 * Function to sync the dates with the quiz formulary
 */
function _classroomquiz_sync_dates(&$node) {
  module_load_include('inc', 'classroom', 'classroom.assignments');
  $node->classroom_assignment['end_date']['date'] = $node->quiz_close;
  $node->classroom_assignment['end_date']['type'] = 0;
  _classroom_assignment_sync_dates($node);
}


/**
 * Function to delete responses when all quiz responses are deleted
 */
function _classroomquiz_delete_responses(&$form ,$form_state, $form_id ) {
  $response_id = $form['del_rid']['#value'];
  $questions = db_fetch_array(
      db_query("SELECT nid FROM quiz_node_results WHERE result_id = %d",$response_id)
    );

  $question_nid = $questions['nid'];
  $question_node = node_load($question_nid);

  $counts = db_fetch_array(
    db_query("SELECT COUNT(*) as N FROM quiz_node_results WHERE nid = %d",$question_nid));
  $count = $counts['N'];

  if ((int)$count == 1) {
    $nids = db_fetch_array(
      db_query("SELECT nid FROM classroom_response WHERE".
      " assignment_nid = %d",$question_nid));

    $nid = $nids['nid'];

    node_delete($nid);
  }
}

/**
 * Hook quiz_finished
 */
function classroomquiz_quiz_finished($quiz, $score) {
  global $user;
  module_load_include('inc','classroom','classroom.assignments'); 
  module_load_include('inc','quiz', 'quiz.pages');

  $reponse = new stdClass();

  //Get the responses if there are any
  $responses = classroom_assignment_get_responses($quiz, $user);

  if ( count($responses) >0 ){
    $response = node_load($responses[0]["nid"]);
  }

  //Search the first type to create a response
  $types = _classroom_get_types_for('response');
  reset($types);
  $obj = current($types);
  $key = key($types);
  $response->type = $key;

  $results = _quiz_get_results($quiz->nid,$user->uid);

  //Set the title for the link
  $response->title = t("View results");

  $response->uid = $user->uid;
  $response->classroom_response['assignment_nid'] = $quiz->nid;

  $current_grade = $response->classroom_response['grade'];

  //Calculate the score
  if ($score['percentage_score'] == 0)
    $response->classroom_response['grade'] = 0;
  else
    $response->classroom_response['grade'] = 
    ( 100 * $quiz->classroom_assignment["max_grade"]) / $score['percentage_score'];

  if ($response->classroom_response['grade']<$current_grade)
    $response->classroom_response['grade'] = $current_grade;

  $response->validated = false;

  node_save($response);
}

/**
 * Implementation of hook_classroom_perms().
 */
function classroomquiz_classroom_perms() {
  return array(
    'classroomquiz' => array(
      'teacher' => array(
        'access quiz',
        'administer quiz',
        'create quiz',
        'delete any quiz',
        'delete own quiz',
        'edit any quiz',
        'edit own quiz',
        'view own results',
        'view user results',
        'allow any number of answers',
        'allow feedback',
        'allow multiple correct answers',
        'allow user titles',
        'delete any multichoice',
        'delete own multichoice',
        'edit any multichoice',
        'edit own multichoice',
      ),
      'student' => array(
        'access quiz',
        'view own results',
        'view user results',
        'allow any number of answers',
        'allow feedback',
        'allow multiple correct answers',
        'allow user titles',
        'edit own multichoice',
      ),
    ),
  );
}

/**
 * Implementation of hook_classroom_response_link().
 */
function classroomquiz_classroom_response_link($node, $user) {
  if ($node->type == 'quiz') {
    return array(
      'classroomquiz' => array(
        'title' => t('To answer'),
        'href' => "node/$node->nid",
      ),
    );
  }
}

function classroomquiz_set_breadcrumb($quiz) {
  $breadcrumb = classroom_build_breadcrumb($quiz);
  array_push($breadcrumb,
    l($quiz->title, "classroomquiz/{$quiz->nid}")
  );
  drupal_set_breadcrumb($breadcrumb);
}
